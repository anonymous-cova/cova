diff --git a/libavcodec/h264_mb.c b/libavcodec/h264_mb.c
index 3cd17b7e4b..f2d53a03b1 100644
--- a/libavcodec/h264_mb.c
+++ b/libavcodec/h264_mb.c
@@ -28,11 +28,13 @@

 #include "config.h"

+#include "get_bits.h"
 #include "libavutil/common.h"
 #include "libavutil/intreadwrite.h"
 #include "avcodec.h"
 #include "h264dec.h"
 #include "h264_ps.h"
+#include "mpegutils.h"
 #include "qpeldsp.h"
 #include "thread.h"

@@ -815,3 +817,39 @@ void ff_h264_hl_decode_mb(const H264Context *h, H264SliceContext *sl)
     } else
         hl_decode_mb_simple_8(h, sl);
 }
+
+void extract_metadata(const H264Context *h, H264SliceContext *sl)
+{
+    const int mb_x = sl->mb_x;
+    const int mb_y = sl->mb_y;
+    const int mb_xy   = sl->mb_xy;
+    const int mb_type = h->cur_pic.mb_type[mb_xy];
+
+    uint8_t mb_weight;
+
+    if (IS_INTRA(mb_type))
+        mb_weight = 6;
+    else if (IS_SKIP(mb_type) || IS_DIRECT(mb_type))
+        mb_weight = 1;
+    else if (IS_SUB_4X4(sl->sub_mb_type[0]))
+        mb_weight = 5;
+    else if (IS_16X16(mb_type))
+        mb_weight = 2;
+    else if (IS_16X8(mb_type) || IS_8X16(mb_type))
+        mb_weight = 3;
+    else if (IS_8X8(mb_type))
+        mb_weight = 4;
+    else
+        mb_weight = 0;
+
+    const int b_stride = h->b_stride;
+    const int b_xy = 4 * mb_x + 4 * mb_y * b_stride;
+    int16_t (*mv)[2] = &h->cur_pic.motion_val[0][b_xy + 0 * b_stride];
+
+    const int idx = mb_x + mb_y * h->mb_width;
+    uint8_t *dst = h->cur_pic.f->data[0] + idx * 4;
+    *(dst + 0) = mb_weight;
+    *(dst + 1) = (uint8_t) av_clip_uint8_c(abs((*mv)[0]));
+    *(dst + 2) = (uint8_t) av_clip_uint8_c(abs((*mv)[1]));
+}
diff --git a/libavcodec/h264_slice.c b/libavcodec/h264_slice.c
index 7c69016338..118f4bad03 100644
--- a/libavcodec/h264_slice.c
+++ b/libavcodec/h264_slice.c
@@ -2645,8 +2645,10 @@ static int decode_slice(struct AVCodecContext *avctx, void *arg)

             ret = ff_h264_decode_mb_cabac(h, sl);

-            if (ret >= 0)
-                ff_h264_hl_decode_mb(h, sl);
+            if (ret >= 0) {
+                extract_metadata(h, sl);
+                /* ff_h264_hl_decode_mb(h, sl); */
+            }

             // FIXME optimal? or let mb_decode decode 16x32 ?
             if (ret >= 0 && FRAME_MBAFF(h)) {
@@ -2654,8 +2656,10 @@ static int decode_slice(struct AVCodecContext *avctx, void *arg)

                 ret = ff_h264_decode_mb_cabac(h, sl);

-                if (ret >= 0)
-                    ff_h264_hl_decode_mb(h, sl);
+                if (ret >= 0) {
+                    extract_metadata(h, sl);
+                    /* ff_h264_hl_decode_mb(h, sl); */
+                }
                 sl->mb_y--;
             }
             eos = get_cabac_terminate(&sl->cabac);
diff --git a/libavcodec/h264dec.h b/libavcodec/h264dec.h
index b3677cdbb9..89be5305c1 100644
--- a/libavcodec/h264dec.h
+++ b/libavcodec/h264dec.h
@@ -586,6 +586,7 @@ int ff_h264_decode_ref_pic_marking(H264SliceContext *sl, GetBitContext *gb,
                                    const H2645NAL *nal, void *logctx);

 void ff_h264_hl_decode_mb(const H264Context *h, H264SliceContext *sl);
+void extract_metadata(const H264Context *h, H264SliceContext *sl);
 void ff_h264_decode_init_vlc(void);

 /**
